Dictionary subclass: #EnumDictionary	instanceVariableNames: 'enumClass'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!!EnumDictionary methodsFor: 'getEnum' stamp: 'me 6/6/2023 14:42'!getEnum	^enumClass.! !!EnumDictionary methodsFor: 'add ' stamp: 'me 6/6/2023 12:17'!add: anAssociation	(anAssociation key class superclass = self getEnum) ifFalse:[AssertionFailure signal:('this EnumDictionary only accepts ',self getEnum, '''s values as keys')].	^(super add:anAssociation).! !!EnumDictionary methodsFor: 'setEnum' stamp: 'me 6/6/2023 12:16'!setEnum: anEnumClass	(Smalltalk hasClassNamed:enumClass asString) ifTrue:[AssertionFailure signal:('the Dictionary''s enum is already defined with ', enumClass)].	((anEnumClass superclass = OOPEnum) and: (Smalltalk hasClassNamed:anEnumClass asString)) ifFalse:[AssertionFailure signal:(anEnumClass asString, ' is 	not an Enum')].	enumClass := anEnumClass.! !!EnumDictionary methodsFor: 'initialize-release' stamp: 'me 6/6/2023 12:15'!initialize	^self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnumDictionary class	instanceVariableNames: ''!!EnumDictionary class methodsFor: 'onEnum' stamp: 'me 6/6/2023 12:21'!onEnum: anEnumClass	| retval |	((Smalltalk hasClassNamed:(anEnumClass asString)) and:(anEnumClass superclass = OOPEnum)) ifFalse:[AssertionFailure signal:(anEnumClass asString, ' 	is not an Enum')].	retval := self new.	retval setEnum:anEnumClass.	^retval.	! !Object subclass: #OOPEnum	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPEnum class	instanceVariableNames: 'values lazyInitialization'!!OOPEnum class methodsFor: 'addLazySetterAndGetter' stamp: 'me 6/6/2023 13:32'!addLazySetterAndGetter:aString	self class compile:(aString, String cr, String tab, 'self dummyMethodSet:''', aString,''' withVal:(',self,'_',aString,'__ basicNew).', String cr, String tab, ' (self dummyMethodGet:''', aString, ''') initialize. self addSetterAndGetter:''',aString,'''. ^(self ', aString, ').').! !!OOPEnum class methodsFor: 'addMethod' stamp: 'me 6/6/2023 13:33'!addMethod:aMethod toEnumClass:aClass Named:aName	aClass class compileMethod:(aMethod, String cr, '^(', aName, 'Block value).').! !!OOPEnum class methodsFor: 'addSetterAndGetter' stamp: 'me 6/6/2023 13:34'!addSetterAndGetter:aString	self class compile:(aString,' ^',aString,'.').	self class compile:(aString, ':x ', aString, ':=x.').! !!OOPEnum class methodsFor: 'addSwitch' stamp: 'me 6/6/2023 13:34'!addSwitch	(self superclass = OOPEnum) ifFalse:[AssertionFailure signal:('can''t add switch functionality to non-Enum class ', self asString)].	self backtrackValues:(Array new).! !!OOPEnum class methodsFor: 'backtrackValues' stamp: 'me 6/6/2023 13:34'!backtrackValues:array	| size enumvals method firstdone count |	enumvals := self instVarNamed:'values'.	size := enumvals size.	method := ''.	count := 0.	firstdone := false.	(array size < size) ifTrue:[(0 to:1 by:1) do:[:i | self backtrackValues:(array, (Array newFrom:{i}))]]	ifFalse:[(1 to:(size) do:[:i | ((array at:i) = 1) ifTrue:[count := (count + 1). firstdone ifFalse:[firstdone := true. method := (method,'switch_case_',(enumvals at:i),': ', (enumvals at:i), 'Block')] ifTrue:[method := (method, ' case_', (enumvals at:i), ': ', (enumvals at:i), 'Block')]]]). (count = (enumvals size)) ifFalse:[method := (method, ' default: defaultBlock')].		(1 to:(size) do:[:i | ((array at:i) = 1) ifTrue:[self addMethod:method toEnumClass:(self dummyMethodCall:(enumvals at:i)) Named:(enumvals at:i).] ifFalse:[self addMethod:method toEnumClass:(self dummyMethodCall:(enumvals at:i)) Named:'default'.]])].! !!OOPEnum class methodsFor: 'classbuild' stamp: 'me 6/6/2023 13:35'!classbuild: t instanceVariableNames: f classVariableNames: d poolDictionaries: s category: cat 	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver)."	^(ClassBuilder new)		superclass: self		subclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!OOPEnum class methodsFor: 'compile' stamp: 'me 6/6/2023 13:35'!compile: aSourceCode	"comment stating purpose of message"	(self class = OOPEnum class) ifTrue:[^(self compileMethod:aSourceCode)].	(self superclass = OOPEnum) ifTrue:[^(self compileMethod:aSourceCode)].	(self superclass canUnderstand:((Parser new parse:aSourceCode class:self) selector)) ifFalse:[AssertionFailure signal:(((Parser new parse:aSourceCode class:self) selector),' here does not override a method from ',self superclass)].	^(self compileMethod:aSourceCode).! !!OOPEnum class methodsFor: 'compileMethod' stamp: 'me 6/6/2023 13:35'!compileMethod: code 	"Compile the argument, code, as source code in the context of the 	receiver. Create an error notification if the code can not be compiled. 	The argument is either a string or an object that converts to a string or a 	PositionableStream on an object that converts to a string."	^self compile: code notifying: nil! !!OOPEnum class methodsFor: 'createClass' stamp: 'me 6/6/2023 13:36'!createClass:aClass forValue:aString	"creating anonymous classes for the enum values"	| tmpname |	tmpname := (aClass asString,'_',aString,'__') asSymbol.	^(aClass classbuild: tmpname instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: '')."classbuild is the old subclass method"! !!OOPEnum class methodsFor: 'dummyMethodCall' stamp: 'me 6/6/2023 13:36'!dummyMethodCall:method	"comment stating purpose of message"	self class compile:('dummyMethodCall_', String cr, '^(self ', method, ').').	^self dummyMethodCall_.! !!OOPEnum class methodsFor: 'dummyMethodGet' stamp: 'me 6/6/2023 13:36'!dummyMethodGet:method	"comment stating purpose of message"	self class compile:('dummyMethodGet_', String cr, '^', method, '.').	^self dummyMethodGet_.! !!OOPEnum class methodsFor: 'dummyMethodSet' stamp: 'me 6/6/2023 13:37'!dummyMethodSet:method withVal:val	"comment stating purpose of message"	self class compile:('dummyMethod_:val', String cr, method, ' := val.').	self dummyMethod_:val.! !!OOPEnum class methodsFor: 'isValidValue' stamp: 'me 6/6/2023 13:37'!isValidValue:aEnum	"comment stating purpose of message"	(self superclass = OOPEnum) ifFalse:[^false.].	values do:[:x | (aEnum = x) ifTrue:[^true.]].	^false.! !!OOPEnum class methodsFor: 'subclass' stamp: 'me 6/6/2023 13:38'!subclass: aSubclassName instanceVariableNames: instVarNames  classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategory	"disabling this method"	AssertionFailure signal:'You must specify ',aSubclassName,'''s values'.! !!OOPEnum class methodsFor: 'subclass' stamp: 'me 6/6/2023 13:38'!subclass: aSubclassName values:valuesArr lazyInitialization: aBoolean initialize: initializeAsString instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName	"new implementation of subclass"	| newclass |	(self class = OOPEnum class) ifFalse:[AssertionFailure signal:(self asString , ' is final!!!! It can''t be inherited')]."make other subclasses final"	 newclass := self classbuild: aSubclassName instanceVariableNames: instVarNames classVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName. "classbuild is the old subclass method"	newclass instVarNamed:'values' put: (valuesArr copy); instVarNamed:'lazyInitialization' put: aBoolean. "update the valuesArr, to the one passed"	newclass compileMethod:initializeAsString.	valuesArr do:[:x | newclass class addInstVarName:x. aBoolean ifFalse:[newclass addSetterAndGetter:x. newclass dummyMethodSet:x withVal:((self createClass:newclass forValue:x) basicNew).  (newclass dummyMethodGet:x) initialize.]		ifTrue:[self createClass:newclass forValue:x. newclass addLazySetterAndGetter:x.]]. "add the new enum values to this enum class and create the anonymous classes"	^newclass.! !!OOPEnum class methodsFor: 'new' stamp: 'me 6/6/2023 13:38'!new	"changing the defaut new"	AssertionFailure signal:('You can''t create an instance of ',(self)).! !